// Generated by Apple Swift version 4.2.1 (swiftlang-1000.11.42 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import CoreGraphics;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <ZappPlugins/ZappPlugins.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ZappPlugins",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol ZPJsonSerializableProtocol;

SWIFT_CLASS("_TtC11ZappPlugins14APCacheManager")
@interface APCacheManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APCacheManager * _Nonnull shared;)
+ (APCacheManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (void)saveObjectToCache:(id <ZPJsonSerializableProtocol> _Nonnull)object identifier:(NSString * _Nullable)identifier;
- (id <ZPJsonSerializableProtocol> _Nullable)loadObjectFromCacheForClass:(Class _Nonnull)classType identifier:(NSString * _Nullable)identifier SWIFT_WARN_UNUSED_RESULT;
- (void)deleteObjectFromCache:(id <ZPJsonSerializableProtocol> _Nonnull)object identifier:(NSString * _Nullable)identifier;
- (NSURL * _Nullable)getLocalPathForUrlString:(NSString * _Nonnull)urlString SWIFT_WARN_UNUSED_RESULT;
- (void)downloadWithUrlString:(NSString * _Nonnull)urlString completion:(void (^ _Nullable)(BOOL))completion;
@end


SWIFT_CLASS("_TtC11ZappPlugins13APCachedModel")
@interface APCachedModel : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11ZappPlugins6APFile")
@interface APFile : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11ZappPlugins20APLoadingTimeMeasure")
@interface APLoadingTimeMeasure : NSObject
+ (void)appReadyForUse;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP11ZappPlugins36CABasicGenericViewControllerProtocol_")
@protocol CABasicGenericViewControllerProtocol <CABasicGenericViewControllerDataSource, CAComponentDelegate, CAComponentProtocol, CAGenericViewControllerProtocol>
- (void)screenCustomization;
- (void)reloadScreen;
- (void)attemptToPurchaseOverrideModel;
- (void)removeMainComponent;
@property (nonatomic, readonly) BOOL hasMainComponent;
@property (nonatomic) BOOL shouldRefreshScreen;
@end

@class NSDictionary;
@class ZLComponentModel;
@class NSString;

SWIFT_PROTOCOL("_TtP11ZappPlugins24CAComponentModelProtocol_")
@protocol CAComponentModelProtocol <NSCoding, NSCopying, NSObject>
@property (nonatomic, readonly, strong) NSDictionary * _Nonnull object;
@property (nonatomic, weak) id <CAComponentModelProtocol> _Nullable parentModel;
@property (nonatomic, copy) NSArray<id <CAComponentModelProtocol>> * _Nonnull children;
@property (nonatomic, copy) NSString * _Nullable uiTag;
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic, strong) NSDictionary * _Nullable attributes;
@property (nonatomic, strong) NSDictionary * _Nullable actions;
@property (nonatomic, strong) NSDictionary * _Nullable style;
@property (nonatomic, strong) NSObject * _Nonnull dataSource;
@property (nonatomic, readonly) BOOL componentLoaded;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
/// Instance of the component that store information for create CAComponentModel
@property (nonatomic, strong) ZLComponentModel * _Nullable baseComponentModel;
/// Instance of the component that store information about grouping that current CAComponentModel belong to
@property (nonatomic, strong) ZLComponentModel * _Nullable groupComponentModel;
- (NSArray * _Nullable)childsByGroups SWIFT_WARN_UNUSED_RESULT;
- (NSArray<id <CAComponentModelProtocol>> * _Nullable)uniqueChildren SWIFT_WARN_UNUSED_RESULT;
- (void)setModel:(NSObject * _Nonnull)model;
- (id <CAComponentModelProtocol> _Nullable)findChildModelByUITag:(NSString * _Nonnull)uiTag SWIFT_WARN_UNUSED_RESULT;
- (id <CAComponentModelProtocol> _Nullable)topMostComponentModel SWIFT_WARN_UNUSED_RESULT;
- (id <CAComponentModelProtocol> _Nullable)parseModelWithData:(NSDictionary * _Nonnull)dataDictionary SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS("_TtC11ZappPlugins20DateFormatterManager")
@interface DateFormatterManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DateFormatterManager * _Nonnull sharedInstance;)
+ (DateFormatterManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)stringFromDefaultTimeFormatWithDate:(NSDate * _Nonnull)date locale:(NSLocale * _Nullable)locale SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)stringFromDefaultFullDateFormatWithDate:(NSDate * _Nonnull)date locale:(NSLocale * _Nullable)locale SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)stringFromDate:(NSDate * _Nonnull)date dateFormatString:(NSString * _Nonnull)dateFormatString locale:(NSLocale * _Nullable)locale SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, GAScreenHookManagerTypes, closed) {
  GAScreenHookManagerTypesScreenPrehook = 0,
  GAScreenHookManagerTypesScreenPostLaunchhook = 1,
};


SWIFT_CLASS("_TtC11ZappPlugins20GoogleIMAPlugingKeys")
@interface GoogleIMAPlugingKeys : NSObject
+ (NSString * _Nonnull)pluginIdentifier SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC11ZappPlugins15InfoPlistHelper")
@interface InfoPlistHelper : NSObject
+ (UIStatusBarStyle)preferredStatusBarStyle SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end












@interface NSProcessInfo (SWIFT_EXTENSION(ZappPlugins))
+ (BOOL)isOperatingSystemAtLeastWithMajorVersion:(NSInteger)majorVersion minorVersion:(NSInteger)minorVersion patchVersion:(NSInteger)patchVersion SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIAlertController (SWIFT_EXTENSION(ZappPlugins))
/// Presents the alert controller over all the elements in the screen
- (void)show;
@end


@interface UIApplication (SWIFT_EXTENSION(ZappPlugins))
+ (NSString * _Nonnull)bundleName SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)appVersion SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)appBuild SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)versionBuild SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)bundleVersion SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIButton (SWIFT_EXTENSION(ZappPlugins))
/// Helper function to set button font and size
/// \param fontNameKey The font key inside the dictionary to look for.
///
/// \param fontSizeKey The font size.
///
/// \param from styles dictionary.
///
- (void)setFontWithFontNameKey:(NSString * _Nonnull)fontNameKey fontSizeKey:(NSString * _Nonnull)fontSizeKey from:(NSDictionary<NSString *, id> * _Nullable)dictionary;
/// Helper function to set label font and size
/// \param key The button title text color key on the styles dictionary
///
/// \param from styles dictionary.
///
- (void)setColorWithKey:(NSString * _Nonnull)key from:(NSDictionary<NSString *, id> * _Nullable)dictionary;
@end






@interface UILabel (SWIFT_EXTENSION(ZappPlugins))
/// Helper function to set label color
/// \param key The label key inside the dictionary to look for.
///
/// \param from styles dictionary.
///
- (void)setColorWithKey:(NSString * _Nonnull)key from:(NSDictionary<NSString *, id> * _Nullable)dictionary;
/// Helper function to set label font and size
/// \param fontNameKey The font key inside the dictionary to look for.
///
/// \param fontSizeKey The font size.
///
/// \param from styles dictionary.
///
- (void)setFontWithFontNameKey:(NSString * _Nonnull)fontNameKey fontSizeKey:(NSString * _Nonnull)fontSizeKey from:(NSDictionary<NSString *, id> * _Nullable)dictionary;
@end

@class NSLayoutConstraint;

@interface UIView (SWIFT_EXTENSION(ZappPlugins))
/// Helper function to create or override a layout constraint.
/// \param firstAttribute The receiver’s layout attribute to set.
///
/// \param secondView The second view to constrain against. Defaults to <code>nil</code>.
///
/// \param secondAttribute The layout attribute of secondView against which to constrain. Defaults to <code>.notAnAttribute</code>.
///
/// \param constant The constant value to set for the constraint.
///
/// \param priority The priority of the constraint. Defaults to <code>UILayoutPriorityRequired</code>.
///
///
/// returns:
/// A new constraint if it was created, otherwise the constraint that was overridden.
- (NSLayoutConstraint * _Nonnull)setConstraintFor:(NSLayoutAttribute)firstAttribute secondView:(id _Nullable)secondView secondAttribute:(NSLayoutAttribute)secondAttribute to:(CGFloat)constant priority:(UILayoutPriority)priority;
/// Helper function to set the view background color
/// \param key The background key inside the dictionary to look for.
///
/// \param from styles dictionary.
///
- (void)setBackgroundColorWithKey:(NSString * _Nonnull)key from:(NSDictionary<NSString *, id> * _Nullable)dictionary;
@end


@interface UIViewController (SWIFT_EXTENSION(ZappPlugins))
/// Present a modal view controller using an animation from Right to Left (similar to a push navigation)
/// \param viewControllerToPresent The view controller to display over the current view controller’s content.
///
/// \param completion The block to execute after the presentation finishes. This block has no return value and takes no parameters. You may specify nil for this parameter.
///
- (void)presentPushAnimated:(UIViewController * _Nonnull)viewControllerToPresent completion:(void (^ _Nullable)(void))completion;
/// Dismiss a modal view controller using an animation from Left to Right (similar to a push navigation)
/// \param completion The block to execute after the view controller is dismissed. This block has no return value and takes no parameters. You may specify nil for this parameter.
///
- (void)dismissPushAnimatedWithCompletion:(void (^ _Nullable)(void))completion;
@end


SWIFT_CLASS("_TtC11ZappPlugins16ZAAccountKitUser")
@interface ZAAccountKitUser : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol ZAAppDelegateConnectorAnalyticsProtocol;
@protocol ZAAppDelegateConnectorGenericProtocol;
@protocol ZAAppDelegateConnectorLocalizationProtocol;
@protocol ZAAppDelegateConnectorNavigationProtocol;
@protocol ZAAppDelegateConnectorLayoutsStylesProtocol;
@protocol ZAAppDelegateConnectorTimeProtocol;
@protocol ZAAppDelegateConnectorAnimationProtocol;
@protocol ZAAppDelegateConnectorURLProtocol;
@protocol ZAAppDelegateConnectorFirebaseRemoteConfigurationProtocol;
@protocol ZAAppDelegateConnectorChromecastProtocol;
@protocol ZAAppDelegateConnectorFacebookAccountKitProtocol;
@protocol ZAAppDelegateConnectorQuickBrickProtocol;
@protocol ZAAppDelegateConnectorComponentsProtocol;
@protocol ZAAppDelegateConnectorRootProtocol;
@protocol ZAAppDelegateConnectorConnectivityProtocol;
@protocol ZAAppDelegateConnectorIdentityProtocol;
@protocol ZAAppDelegateConnectorStoreFrontProtocol;
@protocol ZAAppDelegateConnectorImageProtocol;
@protocol ZAAppDelegateConnectorStickyViewProtocol;
@protocol ZAAppDelegateConnectorHqmeProtocol;
@protocol ZAAppDelegateConnectorNetworkProtocol;

SWIFT_CLASS("_TtC11ZappPlugins14ZAAppConnector")
@interface ZAAppConnector : NSObject
+ (ZAAppConnector * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) id <ZAAppDelegateConnectorAnalyticsProtocol> _Null_unspecified analyticsDelegate;
@property (nonatomic, strong) id <ZAAppDelegateConnectorGenericProtocol> _Null_unspecified genericDelegate;
@property (nonatomic, strong) id <ZAAppDelegateConnectorLocalizationProtocol> _Null_unspecified localizationDelegate;
@property (nonatomic, strong) id <ZAAppDelegateConnectorNavigationProtocol> _Null_unspecified navigationDelegate;
@property (nonatomic, strong) id <ZAAppDelegateConnectorLayoutsStylesProtocol> _Null_unspecified layoutsStylesDelegate;
@property (nonatomic, strong) id <ZAAppDelegateConnectorTimeProtocol> _Null_unspecified timeDelegate;
@property (nonatomic, strong) id <ZAAppDelegateConnectorAnimationProtocol> _Null_unspecified animationDelegate;
@property (nonatomic, strong) id <ZAAppDelegateConnectorURLProtocol> _Null_unspecified urlDelegate;
@property (nonatomic, strong) id <ZAAppDelegateConnectorFirebaseRemoteConfigurationProtocol> _Null_unspecified firebaseRemoteConfigurationDelegate;
@property (nonatomic, strong) id <ZAAppDelegateConnectorChromecastProtocol> _Null_unspecified chromecastDelegate;
@property (nonatomic, strong) id <ZAAppDelegateConnectorFacebookAccountKitProtocol> _Null_unspecified facebookAccountKitDelegate;
@property (nonatomic, strong) id <ZAAppDelegateConnectorQuickBrickProtocol> _Null_unspecified quickBrickDelegate;
@property (nonatomic, strong) id <ZAAppDelegateConnectorComponentsProtocol> _Null_unspecified componentsDelegate;
@property (nonatomic, strong) id <ZAAppDelegateConnectorRootProtocol> _Null_unspecified rootDelegate;
@property (nonatomic, strong) id <ZAAppDelegateConnectorConnectivityProtocol> _Null_unspecified connectivityDelegate;
@property (nonatomic, strong) id <ZAAppDelegateConnectorIdentityProtocol> _Null_unspecified identityDelegate;
@property (nonatomic, strong) id <ZAAppDelegateConnectorStoreFrontProtocol> _Null_unspecified storeFrontDelegate;
@property (nonatomic, strong) id <ZAAppDelegateConnectorImageProtocol> _Null_unspecified imageDelegate;
@property (nonatomic, strong) id <ZAAppDelegateConnectorStickyViewProtocol> _Null_unspecified stickyViewDelegate;
@property (nonatomic, strong) id <ZAAppDelegateConnectorHqmeProtocol> _Nullable hqmeDelegate;
@property (nonatomic, strong) id <ZAAppDelegateConnectorNetworkProtocol> _Nullable networkDelegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP11ZappPlugins39ZAAppDelegateConnectorAnalyticsProtocol_")
@protocol ZAAppDelegateConnectorAnalyticsProtocol
- (void)trackEventWithName:(NSString * _Nonnull)name parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters;
- (void)trackEventWithName:(NSString * _Nonnull)name parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters model:(id _Nullable)model;
- (void)trackScreenViewWithScreenTitle:(NSString * _Nonnull)screenTitle parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters;
- (void)trackEventWithName:(NSString * _Nonnull)name parameters:(NSDictionary<NSString *, id> * _Nullable)parameters timed:(BOOL)timed;
- (void)endTimedEvent:(NSString * _Nonnull)eventName withParameters:(NSDictionary<NSString *, id> * _Nullable)parameters;
@end


SWIFT_PROTOCOL("_TtP11ZappPlugins40ZAAppDelegateConnectorComponentsProtocol_")
@protocol ZAAppDelegateConnectorComponentsProtocol
- (void)customizationFor:(NSObject * _Nonnull)element attributeKey:(NSString * _Nonnull)attributeKey attributesDictionary:(NSDictionary<NSString *, NSString *> * _Nonnull)attributesDictionary defaultAttributesDictionary:(NSDictionary<NSString *, NSString *> * _Nullable)defaultAttributesDictionary componentModel:(id <CAComponentModelProtocol> _Nonnull)componentModel componentDataSourceModel:(NSObject * _Nullable)componentDataSourceModel componentState:(CAComponentState)componentState;
- (UIViewController * _Nullable)getScreenPluginViewControllerWithViewController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
- (NSLayoutConstraint * _Nullable)getScreenPluginViewToTopConstraintWithViewController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
@end

enum ZAConnectivityState : NSInteger;

SWIFT_PROTOCOL("_TtP11ZappPlugins42ZAAppDelegateConnectorConnectivityListener_")
@protocol ZAAppDelegateConnectorConnectivityListener
- (void)connectivityStateChanged:(enum ZAConnectivityState)updatedStatus;
@end

@protocol ZPUIBuilderScreenProtocol;

SWIFT_PROTOCOL("_TtP11ZappPlugins42ZAAppDelegateConnectorConnectivityProtocol_")
@protocol ZAAppDelegateConnectorConnectivityProtocol
/// Show offline screen if needed
- (void)showOfflineScreenIfNeededOn:(UIViewController <ZPUIBuilderScreenProtocol> * _Nonnull)viewController;
/// Get online status
- (BOOL)isOnline SWIFT_WARN_UNUSED_RESULT;
/// Get offline status
- (BOOL)isOffline SWIFT_WARN_UNUSED_RESULT;
/// Get current connectivity state
- (enum ZAConnectivityState)getCurrentConnectivityState SWIFT_WARN_UNUSED_RESULT;
/// Add listener to get calls for connectivity state changes
- (void)addConnectivityListener:(id <ZAAppDelegateConnectorConnectivityListener> _Nonnull)listener;
/// Remove listener to get calls for connectivity state changes
- (void)removeConnectivityListener:(id <ZAAppDelegateConnectorConnectivityListener> _Nonnull)listener;
@end

@protocol ZPVideoBackgroundViewProtocol;
@protocol ZPCollectionProtocol;
@protocol ZPBroadcasterProtocol;
@protocol ZPScreenHookManagerProtocol;
@class ZLScreenModel;

SWIFT_PROTOCOL("_TtP11ZappPlugins37ZAAppDelegateConnectorGenericProtocol_")
@protocol ZAAppDelegateConnectorGenericProtocol
- (NSDictionary<NSString *, id> * _Nonnull)currentBroadcasterExtensions SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)accountExtensionsDictionary SWIFT_WARN_UNUSED_RESULT;
/// Retreive view controller from navigation item
/// \param navigationItem ZLNavigationItemInstance
///
///
/// returns:
/// UIViewController instance nil if can not be created
- (UIViewController * _Nullable)viewControllerFromNavigationItem:(id _Nonnull)navigationItem SWIFT_WARN_UNUSED_RESULT;
/// @return Indicate Nav Bar UI Builder API Enable or Disable.
- (BOOL)navBarUIBuilderApiEnabled SWIFT_WARN_UNUSED_RESULT;
/// @return Indicate Root UI Builder API Enable or Disable.
- (BOOL)rootUIBuilderApiEnabled SWIFT_WARN_UNUSED_RESULT;
/// ApplicasterSDK accountID
///
/// returns:
/// String Instance
- (NSString * _Nullable)accountID SWIFT_WARN_UNUSED_RESULT;
/// @return Is this app running on debug configuration, this method useful for static frameworks instead of the DEBUG precompiler flag
- (BOOL)isDebug SWIFT_WARN_UNUSED_RESULT;
/// Returns RTL status
- (BOOL)isRTL SWIFT_WARN_UNUSED_RESULT;
/// Splash Helper
/// @return Local background video name for screen size
- (NSString * _Nonnull)splashHelperGetLocalBackgroundVideoNameForScreenSizeWithBaseFileName:(NSString * _Nonnull)baseFileName SWIFT_WARN_UNUSED_RESULT;
/// Create new video background view
/// @return new instance conforming protocol ZPVideoBackgroundViewProtocol
- (id <ZPVideoBackgroundViewProtocol> _Nonnull)createVideoBackgroundViewInstance SWIFT_WARN_UNUSED_RESULT;
/// Retrieve collection by ui tag
/// \param model collection ui tag
///
///
/// returns:
/// collection in completion
- (void)loadCollectionForUiTag:(NSString * _Nonnull)uiTag completion:(void (^ _Nonnull)(NSArray<NSObject *> * _Nonnull))completion;
- (void)loadCollectionItemsForUiTag:(NSString * _Nonnull)uiTag completion:(void (^ _Nonnull)(id <ZPCollectionProtocol> _Nullable))completion;
/// Retrieve dictionary from model
/// \param model model to retrieve dictionary
///
///
/// returns:
/// dictionary from model or nil
- (NSDictionary * _Nullable)datasourceModelDictionaryWithModel:(NSObject * _Nullable)model SWIFT_WARN_UNUSED_RESULT;
/// Try to close view controller created from navigation bar
/// \param viewController UIViewController must be GARootViewControllerController
///
///
/// returns:
/// True if succeded otherwise false
- (BOOL)closeViewControllerCreatedFromNavigationBarWithViewController:(UIViewController * _Nullable)viewController SWIFT_WARN_UNUSED_RESULT;
/// Get broadcaster functions
- (id <ZPBroadcasterProtocol> _Nullable)getBroadcasterByID:(NSString * _Nonnull)byID SWIFT_WARN_UNUSED_RESULT;
- (NSArray<id <ZPBroadcasterProtocol>> * _Nullable)getBroadcasters SWIFT_WARN_UNUSED_RESULT;
- (id <ZPBroadcasterProtocol> _Nullable)getCurrentBroadcaster SWIFT_WARN_UNUSED_RESULT;
- (void)sendLoggerErrorWithMessage:(NSString * _Nonnull)message;
- (void)sendLoggerDebugWithMessage:(NSString * _Nonnull)message;
- (void)sendLoggerInfoWithMessage:(NSString * _Nonnull)message;
- (id <ZPScreenHookManagerProtocol> _Nonnull)hookManager SWIFT_WARN_UNUSED_RESULT;
- (ZLScreenModel * _Nullable)screenModelForPluginIDWithPluginID:(NSString * _Nullable)pluginID dataSource:(NSObject * _Nullable)dataSource SWIFT_WARN_UNUSED_RESULT;
- (ZLScreenModel * _Nullable)screenModelForLegacyScreenID:(NSString * _Nullable)screenID SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary * _Nullable)extensionDictForModelWithModel:(NSObject * _Nullable)model SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)valueFromExtensionDictForModelWithModel:(NSObject * _Nullable)model for:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getBundleIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Retreive path for plugins for plugin_configurations
///
/// returns:
/// URL instance
- (NSURL * _Nullable)pluginsURLPath SWIFT_WARN_UNUSED_RESULT;
/// Checks if there is home offline screen
- (BOOL)hasScreenModelForOfflineHome SWIFT_WARN_UNUSED_RESULT;
/// Set automation identifier
- (void)setAutomationAccessibilityIdentifierForView:(UIView * _Nullable)view identifier:(NSString * _Nullable)identifier;
@end

@protocol ZPDownloadableItemProtocol;
enum ZPHqmeItemOfflineState : NSInteger;
@class AVURLAsset;
enum ZPHqmeState : NSInteger;
@protocol ZPModelProtocol;
@protocol ZPDownloadButtonDelegate;
@protocol ZPDownloadButtonProtocol;

SWIFT_PROTOCOL("_TtP11ZappPlugins34ZAAppDelegateConnectorHqmeProtocol_")
@protocol ZAAppDelegateConnectorHqmeProtocol
/// getting the state of the item
- (enum ZPHqmeItemOfflineState)getItemOfflineStateForItem:(id <ZPDownloadableItemProtocol> _Nullable)item SWIFT_WARN_UNUSED_RESULT;
/// getting the state of the item by id
- (enum ZPHqmeItemOfflineState)getItemOfflineStateForItemId:(NSString * _Nullable)itemId SWIFT_WARN_UNUSED_RESULT;
/// gets a list of items for the state
- (NSArray<id <ZPDownloadableItemProtocol>> * _Nonnull)getItemsForState:(enum ZPHqmeItemOfflineState)state SWIFT_WARN_UNUSED_RESULT;
/// get download progress for item
- (CGFloat)getDownloadProgress:(id <ZPDownloadableItemProtocol> _Nullable)item SWIFT_WARN_UNUSED_RESULT;
/// download specific item
- (void)download:(id <ZPDownloadableItemProtocol> _Nullable)item;
/// cancel downloading specific item
- (void)cancelDownloading:(id <ZPDownloadableItemProtocol> _Nullable)item;
/// set the sound for the downloeded item
- (void)setBackgroundDownloadEndSoundWithFilename:(NSString * _Nonnull)filename;
/// get the avUrlAsset for item
- (AVURLAsset * _Nullable)getAvUrlAssetForItem:(id <ZPDownloadableItemProtocol> _Nullable)item SWIFT_WARN_UNUSED_RESULT;
/// get an indication if hqme is supported
- (BOOL)isSupported SWIFT_WARN_UNUSED_RESULT;
/// Force offline
- (void)forceOfflineDueToBadConnectivity;
/// get current hqme state
@property (nonatomic) enum ZPHqmeState hqmeState;
/// state changed handler
@property (nonatomic, copy) void (^ _Nullable hqmeStateChanged)(void);
/// get local item if available by item id
- (id <ZPDownloadableItemProtocol> _Nullable)dataStoreGetLocalItemIfAvailableWithItemId:(NSString * _Nonnull)itemId SWIFT_WARN_UNUSED_RESULT;
/// delete locally stored item
- (void)dataStoreDeleteItem:(id <ZPDownloadableItemProtocol> _Nullable)item;
/// delete all local items
- (void)dataStoreDeleteAll;
/// save a list of item ids to file
- (void)dataStoreSaveItemIdsToFile;
/// load local model if available
- (BOOL)dataStoreLoadLocalModelIfAvailable:(id <ZPModelProtocol> _Nonnull)model SWIFT_WARN_UNUSED_RESULT;
/// save model locally
- (void)dataStoreSaveModelLocally:(id <ZPModelProtocol> _Nonnull)model;
/// checks if there is local data for model
- (BOOL)dataStoreHasLocalDataForModel:(id <ZPModelProtocol> _Nonnull)model SWIFT_WARN_UNUSED_RESULT;
/// gets image parh for image name in model
- (NSString * _Nullable)dataStoreImagePathForImageName:(NSString * _Nonnull)imageName forModel:(id <ZPModelProtocol> _Nonnull)model SWIFT_WARN_UNUSED_RESULT;
/// checks if the item is legacy item
- (BOOL)cacheIsLegacyItem:(id <ZPDownloadableItemProtocol> _Nullable)item SWIFT_WARN_UNUSED_RESULT;
/// gets the path to item
- (NSString * _Nonnull)cachePathForItem:(id <ZPDownloadableItemProtocol> _Nullable)item SWIFT_WARN_UNUSED_RESULT;
/// gets the current local server port
@property (nonatomic, readonly) NSUInteger localServerPort;
/// starts local server on specified port
- (void)localServerStartWithPort:(NSUInteger)port;
/// indication of hqme screen dismiss
- (void)hqmeScreenWillDissmised;
/// start presenting offline mode screen
- (void)tryPresentOfflineMode;
/// create download button
- (id <ZPDownloadButtonProtocol> _Nullable)createDownloadButtonWithDelegate:(id <ZPDownloadButtonDelegate> _Nonnull)delegate size:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)getPlayerControllerParams:(id _Nullable)playerControllerObject completion:(SWIFT_NOESCAPE void (^ _Nonnull)(BOOL, BOOL, id <ZPDownloadableItemProtocol> _Nullable))completion;
@end


SWIFT_PROTOCOL("_TtP11ZappPlugins38ZAAppDelegateConnectorIdentityProtocol_")
@protocol ZAAppDelegateConnectorIdentityProtocol
/// The unique identifier for this user.
/// @return The unique identifier if one has been generated. <code>nil</code> otherwise.
- (NSString * _Nullable)getDeviceId SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nullable)authorizationTokens SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isLoginPluginAuthenticated SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getLoginPluginToken SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImageView;
@class UIImage;

SWIFT_PROTOCOL("_TtP11ZappPlugins35ZAAppDelegateConnectorImageProtocol_")
@protocol ZAAppDelegateConnectorImageProtocol
- (void)setImageTo:(UIImageView * _Nonnull)imageView url:(NSURL * _Nullable)url maskImage:(UIImage * _Nullable)maskImage fallbackImage:(UIImage * _Nullable)fallbackImage placeholderImage:(UIImage * _Nullable)placeholderImage serverResizable:(BOOL)serverResizable;
- (void)setImageTo:(UIImageView * _Nonnull)imageView url:(NSURL * _Nullable)url placeholderImage:(UIImage * _Nullable)placeholderImage;
- (void)setImageWith:(NSURL * _Nullable)url placeholderImage:(UIImage * _Nullable)placeholderImage completion:(void (^ _Nullable)(UIImage * _Nullable, NSError * _Nullable))completion;
/// Animation button
- (void)setAnimatedImageForButton:(UIButton * _Nonnull)forButton url:(NSURL * _Nonnull)url controlState:(UIControlState)controlState;
@end

@class NSURLSessionTask;

SWIFT_PROTOCOL("_TtP11ZappPlugins37ZAAppDelegateConnectorNetworkProtocol_")
@protocol ZAAppDelegateConnectorNetworkProtocol
- (NSURLSessionTask * _Nullable)requestJsonObjectForRequest:(NSURLRequest * _Nonnull)request completion:(void (^ _Nullable)(BOOL, id _Nullable, NSError * _Nullable, NSInteger))completion;
- (NSURLSessionTask * _Nullable)requestJsonObjectForRequest:(NSURLRequest * _Nonnull)request queue:(dispatch_queue_t _Nullable)queue completion:(void (^ _Nullable)(BOOL, id _Nullable, NSError * _Nullable, NSInteger))completion;
- (void)requestJsonObjectForUrlString:(NSString * _Nonnull)urlString method:(NSString * _Nonnull)method parameters:(NSDictionary<NSString *, id> * _Nullable)parameters completion:(void (^ _Nullable)(BOOL, id _Nullable, NSError * _Nullable, NSInteger))completion;
- (NSURLSessionTask * _Nullable)requestJsonObjectForUrlString:(NSString * _Nonnull)urlString method:(NSString * _Nonnull)method parameters:(NSDictionary<NSString *, id> * _Nullable)parameters queue:(dispatch_queue_t _Nullable)queue completion:(void (^ _Nullable)(BOOL, id _Nullable, NSError * _Nullable, NSInteger))completion;
- (NSURLSessionTask * _Nullable)requestJsonObjectForUrlString:(NSString * _Nonnull)urlString method:(NSString * _Nonnull)method parameters:(NSDictionary<NSString *, id> * _Nullable)parameters queue:(dispatch_queue_t _Nullable)queue headers:(NSDictionary<NSString *, NSString *> * _Nullable)headers completion:(void (^ _Nullable)(BOOL, id _Nullable, NSError * _Nullable, NSInteger))completion;
- (void)requestDataObjectForUrlString:(NSString * _Nonnull)urlString method:(NSString * _Nonnull)method parameters:(NSDictionary<NSString *, id> * _Nullable)parameters completion:(void (^ _Nullable)(BOOL, NSData * _Nullable, NSError * _Nullable, NSInteger, NSString * _Nullable))completion;
- (NSURLSessionTask * _Nullable)requestDataObjectForRequest:(NSURLRequest * _Nonnull)request completion:(void (^ _Nullable)(BOOL, NSData * _Nullable, NSError * _Nullable, NSInteger))completion;
@end


/// ZappAppConnector protocol for Quick Brick Apps
SWIFT_PROTOCOL("_TtP11ZappPlugins40ZAAppDelegateConnectorQuickBrickProtocol_")
@protocol ZAAppDelegateConnectorQuickBrickProtocol
///
/// returns:
/// react native packager root url, as defined by zapptool
- (NSString * _Nullable)reactNativePackagerRoot SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP11ZappPlugins34ZAAppDelegateConnectorRootProtocol_")
@protocol ZAAppDelegateConnectorRootProtocol
- (void)updateNavBarTitle;
- (ZLScreenModel * _Nullable)getHomeScreenDatasourceModel SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP11ZappPlugins40ZAAppDelegateConnectorStickyViewProtocol_")
@protocol ZAAppDelegateConnectorStickyViewProtocol
- (void)stickyViewDisplayWithView:(UIView * _Nullable)view;
- (void)stickyViewRemove;
@end

@protocol ZPDefaultStoreFrontProtocol;
@protocol ZPDefaultStoreFrontHandlerProtocol;
@protocol ZPPurchasableItemProtocol;

SWIFT_PROTOCOL("_TtP11ZappPlugins40ZAAppDelegateConnectorStoreFrontProtocol_")
@protocol ZAAppDelegateConnectorStoreFrontProtocol
/// @return true if thie app contains at least one subscription voucher template. else otherwise.
- (BOOL)hasSubscriptionsInTheApp SWIFT_WARN_UNUSED_RESULT;
/// @return true if the current user has a valid subscription - which means he has purchased one.
- (BOOL)hasValidSubscriptionsVoucher SWIFT_WARN_UNUSED_RESULT;
/// @return true if can present storefront.
- (BOOL)canPresentStoreFront SWIFT_WARN_UNUSED_RESULT;
/// @return new storefront handler.
- (id <ZPDefaultStoreFrontHandlerProtocol> _Nullable)createDefaultStoreFrontHandlerWith:(id <ZPDefaultStoreFrontProtocol> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// @return new item.
- (id <ZPPurchasableItemProtocol> _Nullable)createTempPurchasableItemWith:(NSDictionary<NSString *, id> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, ZAConnectivityState, closed) {
  ZAConnectivityStateOffline = 0,
  ZAConnectivityStateCellular = 1,
  ZAConnectivityStateWifi = 2,
};


SWIFT_CLASS("_TtC11ZappPlugins11ZLBaseModel")
@interface ZLBaseModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11ZappPlugins16ZLComponentModel")
@interface ZLComponentModel : ZLBaseModel
/// Return string value of component type
/// Note: Was done to get from objC type of component
///
/// returns:
/// Name of component or undifined
- (NSString * _Nonnull)componenType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end






SWIFT_CLASS("_TtC11ZappPlugins16ZLStyleBaseModel")
@interface ZLStyleBaseModel : ZLBaseModel
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11ZappPlugins21ZLComponentStyleModel")
@interface ZLComponentStyleModel : ZLStyleBaseModel
@end




SWIFT_CLASS("_TtC11ZappPlugins34ZLComponentStyleSupplementaryModel")
@interface ZLComponentStyleSupplementaryModel : ZLStyleBaseModel
@end


SWIFT_PROTOCOL("_TtP11ZappPlugins31ZLGenericViewControllerProtocol_")
@protocol ZLGenericViewControllerProtocol <CABasicGenericViewControllerProtocol>
@property (nonatomic) BOOL navBarLogoEnabled;
@end


SWIFT_CLASS("_TtC11ZappPlugins16ZLNavigationItem")
@interface ZLNavigationItem : ZLBaseModel
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11ZappPlugins17ZLNavigationModel")
@interface ZLNavigationModel : ZLBaseModel
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ZLPullToRefreshSpinnerType, closed) {
  ZLPullToRefreshSpinnerTypeDefault = 0,
  ZLPullToRefreshSpinnerTypeCustomImage = 1,
};


SWIFT_CLASS("_TtC11ZappPlugins24ZLScreenAdvertisingModel")
@interface ZLScreenAdvertisingModel : ZLBaseModel
@property (nonatomic, copy) NSString * _Nullable bannerAdUnit;
@property (nonatomic, copy) NSString * _Nullable interstitialAdUnit;
@property (nonatomic) BOOL displayInterstitialOnce;
@property (nonatomic) NSInteger interstitialPresentatationAttempCounter;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

enum ZLScreenTypes : NSInteger;

SWIFT_CLASS("_TtC11ZappPlugins13ZLScreenModel")
@interface ZLScreenModel : ZLBaseModel
@property (nonatomic, readonly, copy) NSString * _Nonnull screenID;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, strong) ZLStyleBaseModel * _Nullable style;
@property (nonatomic, readonly, copy) NSArray<ZLComponentModel *> * _Nullable components;
@property (nonatomic, readonly) enum ZLScreenTypes type;
@property (nonatomic, readonly, copy) NSArray<ZLNavigationModel *> * _Nullable navigations;
@property (nonatomic, readonly) BOOL isHomeScreen;
@property (nonatomic, readonly) BOOL isHomeOfflineScreen;
@property (nonatomic, readonly) BOOL supportsOffline;
@property (nonatomic, readonly, strong) ZLScreenAdvertisingModel * _Nullable advertising;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull rules;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull general;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull hooksPlugins;
- (ZLNavigationModel * _Nullable)navigationOfTypeMenu SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface ZLScreenModel (SWIFT_EXTENSION(ZappPlugins))
- (NSString * _Nonnull)viewControllerStringFromScreenType SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)typeInString SWIFT_WARN_UNUSED_RESULT;
/// Check if screen is plugin
///
/// returns:
/// True if Plugin screen, otherwise false
- (BOOL)isPluginScreen SWIFT_WARN_UNUSED_RESULT;
@end


@interface ZLScreenModel (SWIFT_EXTENSION(ZappPlugins))
/// Prehooks dictionary - plugins that must be presetnted before current screen will be shown
@property (nonatomic, readonly, copy) NSArray<NSDictionary<NSString *, id> *> * _Nonnull preLaunchPlugins;
/// Posthooks dictionary - plugins that must be presetnted after screen will be presented
@property (nonatomic, readonly, copy) NSArray<NSDictionary<NSString *, id> *> * _Nonnull postLaunchPlugins;
@end

enum ZLScreenModelRefreshType : NSInteger;
@class UIFont;

@interface ZLScreenModel (SWIFT_EXTENSION(ZappPlugins))
@property (nonatomic, readonly) enum ZLScreenModelRefreshType refreshType;
@property (nonatomic, readonly) BOOL isAutoRefreshEnabled;
@property (nonatomic, readonly) BOOL isPullRefreshEnabled;
@property (nonatomic, readonly, copy) NSURL * _Nullable autoRefreshImageUrl;
@property (nonatomic, readonly, strong) UIColor * _Nullable autoRefreshBackgroundColor;
@property (nonatomic, readonly, strong) UIColor * _Nullable autoRefreshTextColor;
@property (nonatomic, readonly, strong) UIFont * _Nullable autoRefreshFont;
@property (nonatomic, readonly) NSTimeInterval refreshRate;
@property (nonatomic, readonly, strong) UIColor * _Nullable pullToRefreshIndicatorColor;
@property (nonatomic, readonly, strong) UIColor * _Nullable pullToRefreshBackgroundColor;
@property (nonatomic, readonly) enum ZLPullToRefreshSpinnerType pullToRefreshSpinnerType;
@end

typedef SWIFT_ENUM(NSInteger, ZLScreenModelRefreshType, closed) {
  ZLScreenModelRefreshTypeNone = 0,
  ZLScreenModelRefreshTypeAuto = 1,
  ZLScreenModelRefreshTypePull = 2,
  ZLScreenModelRefreshTypeAutoAndPull = 3,
};

typedef SWIFT_ENUM(NSInteger, ZLScreenTypes, closed) {
  ZLScreenTypesGeneral = 0,
  ZLScreenTypesFavorites = 1,
  ZLScreenTypesPlugin = 2,
};


enum ZPAdType : NSInteger;

/// Class with the parameters needed to configure a single ad.
SWIFT_CLASS("_TtC11ZappPlugins10ZPAdConfig")
@interface ZPAdConfig : NSObject
/// Ad unit id.
@property (nonatomic, copy) NSString * _Nonnull adUnitId;
/// Kind of ad.
@property (nonatomic) enum ZPAdType adType;
/// Size identifier used for inline banners.
@property (nonatomic, copy) NSString * _Nullable inlineBannerSize;
/// Create a config object to present an inline banner.
/// \param adUnitId Ad unit id.
///
/// \param inlineBannerSize Size identifier of the inline banner.
///
- (nonnull instancetype)initWithAdUnitId:(NSString * _Nonnull)adUnitId inlineBannerSize:(NSString * _Nonnull)inlineBannerSize OBJC_DESIGNATED_INITIALIZER;
/// Create a config object to present a single ad.
/// \param adUnitId Ad unit id.
///
/// \param adType Kind of ad.
///
- (nonnull instancetype)initWithAdUnitId:(NSString * _Nonnull)adUnitId adType:(enum ZPAdType)adType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class ZPPluginModel;

SWIFT_PROTOCOL("_TtP11ZappPlugins17ZPAdapterProtocol_")
@protocol ZPAdapterProtocol <NSObject>
@property (nonatomic, readonly, strong) NSDictionary * _Nullable configurationJSON;
- (nonnull instancetype)initWithConfigurationJSON:(NSDictionary * _Nullable)configurationJSON;
- (nonnull instancetype)init;
@optional
- (void)handleUrlScheme:(NSDictionary * _Nonnull)params;
/// Implement this method if you need to use the plugin model that initiated your plugin.
/// For example if you need extra information out of it - like react plugins sometiimes need the bundle url.
/// Note - NOT all plugin managers are setting the model right now - so if it doesn’t please look on <code>ZPLoginManager</code> and add it to your plugin manager. This method should be called right after the plugin is being initiated.
- (void)setPluginModel:(ZPPluginModel * _Nonnull)pluginModel;
@end

@protocol ZPAdViewProtocol;
@protocol ZPAdPresenterProtocol;

/// An ad plugin is a class that mananges the construction and visualization of custom advertisement for your app.
SWIFT_PROTOCOL("_TtP11ZappPlugins18ZPAdPluginProtocol_")
@protocol ZPAdPluginProtocol <ZPAdapterProtocol>
/// Creates and return an ad presenter so you could show an ad.
/// \param adView ZPAdViewProtocol that will receive the callbacks from the presenter when important events are happening.
///
/// \param parentVC View controller where the ad will be added or presented from.
///
///
/// returns:
/// Ad presenter that manages the presentation of an ad.
- (id <ZPAdPresenterProtocol> _Nonnull)createAdPresenterWithAdView:(id <ZPAdViewProtocol> _Nonnull)adView parentVC:(UIViewController * _Nonnull)parentVC SWIFT_WARN_UNUSED_RESULT;
/// Returns the size of an inline banner.
/// \param inlineBannerSize Size identifier of the inline banner.
///
///
/// returns:
/// Size of an inline banner
- (CGSize)sizeForInlineBannerSize:(NSString * _Nonnull)inlineBannerSize SWIFT_WARN_UNUSED_RESULT;
/// Returns the provider name.
///
/// returns:
/// Provider name.
- (NSString * _Nonnull)providerName SWIFT_WARN_UNUSED_RESULT;
@end


/// Protocol to allow for custom reloading points
SWIFT_PROTOCOL("_TtP11ZappPlugins25ZPAdPluginRefreshProtocol_")
@protocol ZPAdPluginRefreshProtocol
/// Should the banner reload when the view has been refreshed.
///
/// returns:
/// A <code>Bool</code> describing if the view should refresh.
- (BOOL)reloadOnPullToRefresh SWIFT_WARN_UNUSED_RESULT;
/// Should the banner reload when the banner’s <code>viewDidAppear()</code> is called.
///
/// returns:
/// A <code>Bool</code> describing if the view should refresh.
- (BOOL)reloadOnDidAppear SWIFT_WARN_UNUSED_RESULT;
@end


/// An ad presenter is the class that manages the presentation of an ad.
SWIFT_PROTOCOL("_TtP11ZappPlugins21ZPAdPresenterProtocol_")
@protocol ZPAdPresenterProtocol
/// Creates a new ad presenter.
/// \param adView ZPAdViewProtocol that will receive the callbacks from the presenter when important events are happening.
///
/// \param parentVC View controller where the ad will be added or presented from.
///
- (nonnull instancetype)initWithAdView:(id <ZPAdViewProtocol> _Nonnull)adView parentVC:(UIViewController * _Nonnull)parentVC;
/// Load a new ad.
/// \param adConfig Parameters needed to configure the ad.
///
- (void)loadWithAdConfig:(ZPAdConfig * _Nonnull)adConfig;
/// Return the size of the banner.
///
/// returns:
/// Size of the banner.
- (CGSize)getSize SWIFT_WARN_UNUSED_RESULT;
/// Show an interstitial ad. Only call this method when the ad has being loaded.
- (void)showInterstitial;
@end

/// Type of advertisement
typedef SWIFT_ENUM(NSInteger, ZPAdType, closed) {
/// Banners that appers between cells or between components
  ZPAdTypeInlineBanner = 0,
/// Ads that appears fullscreen when you are visiting a screen
  ZPAdTypeInterstitial = 1,
  ZPAdTypeScreenBanner = 2,
};

enum ZPAdViewState : NSInteger;

/// Protocol that you should implement to receive callbacks from the presenter when important events are happening.
SWIFT_PROTOCOL("_TtP11ZappPlugins16ZPAdViewProtocol_")
@protocol ZPAdViewProtocol
/// Callback when an ad has being loaded. Usually you should implement this method to add the ad to your view or present it.
/// \param view The view of the advertisement.
///
- (void)adLoadedWithView:(UIView * _Nullable)view;
/// Callback when the advertisement change his state.
/// \param adViewState New state of the ad.
///
- (void)stateChangedWithAdViewState:(enum ZPAdViewState)adViewState;
/// Callback when the ad fail to load.
/// \param error Error description.
///
- (void)adLoadFailedWithError:(NSError * _Nonnull)error;
@end

/// State of the ad
typedef SWIFT_ENUM(NSInteger, ZPAdViewState, closed) {
/// The ad hasn’t been initialized yet
  ZPAdViewStateUninitialized = 0,
/// The ad was requested to load
  ZPAdViewStateLoading = 1,
/// The ad has failed to being loaded
  ZPAdViewStateFailed = 2,
/// The ad has being loaded with success
  ZPAdViewStateLoaded = 3,
/// The add has been shown on screen with atleast 50% visibility
  ZPAdViewStateImpressed = 4,
/// The add has been clicked
  ZPAdViewStateClicked = 5,
/// The interstitial ad is closed
  ZPAdViewStateClosed = 6,
};



/// Manager that provides the plugin that manages advertisement.
SWIFT_CLASS("_TtC11ZappPlugins22ZPAdvertisementManager")
@interface ZPAdvertisementManager : NSObject
/// Unique instance of the class.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZPAdvertisementManager * _Nonnull sharedInstance;)
+ (ZPAdvertisementManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Return the plugin that manages advertisement.
///
/// returns:
/// Plugin that manages advertisement
- (id <ZPAdPluginProtocol> _Nullable)getAdPlugin SWIFT_WARN_UNUSED_RESULT;
@end

@class NSUserActivity;

SWIFT_CLASS("_TtC11ZappPlugins23ZPAppLoadingHookManager")
@interface ZPAppLoadingHookManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZPAppLoadingHookManager * _Nonnull sharedInstance;)
+ (ZPAppLoadingHookManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (void)executeOnFailedLoadingWithCompletion:(void (^ _Nullable)(BOOL))completion;
- (void)executeOnLaunchWithCompletion:(void (^ _Nullable)(void))completion;
- (void)executeOnApplicationReadyWithDisplayViewController:(UIViewController * _Nullable)displayViewController completion:(void (^ _Nullable)(void))completion;
- (void)executeAfterAppRootPresentationWithDisplayViewController:(UIViewController * _Nullable)displayViewController completion:(void (^ _Nullable)(void))completion;
- (void)executeOnContinuingUserActivity:(NSUserActivity * _Nullable)userActivity completion:(void (^ _Nullable)(void))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP11ZappPlugins24ZPAppLoadingHookProtocol_")
@protocol ZPAppLoadingHookProtocol <ZPAdapterProtocol>
@optional
- (void)executeOnFailedLoadingWithCompletion:(void (^ _Nullable)(void))completion;
- (void)executeOnLaunchWithCompletion:(void (^ _Nullable)(void))completion;
- (void)executeOnApplicationReadyWithDisplayViewController:(UIViewController * _Nullable)displayViewController completion:(void (^ _Nullable)(void))completion;
- (void)executeAfterAppRootPresentationWithDisplayViewController:(UIViewController * _Nullable)displayViewController completion:(void (^ _Nullable)(void))completion;
- (void)executeOnContinuingUserActivity:(NSUserActivity * _Nullable)userActivity completion:(void (^ _Nullable)(void))completion;
@end


/// A protocol for playable items.
/// An object can be played by the <code>APPlayerController</code> if it conforms to this protocol.
SWIFT_PROTOCOL("_TtP11ZappPlugins10ZPPlayable_")
@protocol ZPPlayable <NSObject>
/// The name of the item to be used for the different player features.
- (NSString * _Null_unspecified)playableName SWIFT_WARN_UNUSED_RESULT;
/// The name of the item to be used for the different player features.
- (NSString * _Null_unspecified)playableDescription SWIFT_WARN_UNUSED_RESULT;
/// A path to the content video.
- (NSString * _Null_unspecified)contentVideoURLPath SWIFT_WARN_UNUSED_RESULT;
/// Get AssetURL for playable
- (AVURLAsset * _Nullable)assetUrl SWIFT_WARN_UNUSED_RESULT;
/// A path to the overlay HTML.
- (NSString * _Null_unspecified)overlayURLPath SWIFT_WARN_UNUSED_RESULT;
/// Indicates if the item is being played live or not.
- (BOOL)isLive SWIFT_WARN_UNUSED_RESULT;
/// Indicates if the item is free or not.
- (BOOL)isFree SWIFT_WARN_UNUSED_RESULT;
/// The public page for this playable.
- (NSString * _Null_unspecified)publicPageURLPath SWIFT_WARN_UNUSED_RESULT;
/// @return the parameters for this playable to be sent for all the analytics events.
- (NSDictionary * _Null_unspecified)analyticsParams SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(macos,introduced=10.0);
@optional
/// The last time reached during playback. This will need to be set by the <APPlayerController>.
@property (nonatomic) NSTimeInterval lastPlayedTime;
/// The item’s duration. This will need to be set by the <APPlayerController>.
@property (nonatomic) NSTimeInterval playbackDuration;
/// A path to the image preroll.
- (NSString * _Null_unspecified)prerollSplashURLPath SWIFT_WARN_UNUSED_RESULT;
/// A path to the video preroll.
- (NSString * _Null_unspecified)prerollVideoURLPath SWIFT_WARN_UNUSED_RESULT;
/// Implement this method in order for the player to know if your playable is capture moment enabled.
- (BOOL)captureMomentEnabled SWIFT_WARN_UNUSED_RESULT;
/// Implement this method in order to supply more params for the different features to have.
- (NSDictionary * _Null_unspecified)extraPlayableInfo SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(macos,introduced=10.0);
/// The Facebook object ID for the Facebook comments feature.
- (NSString * _Null_unspecified)facebookObjectID SWIFT_WARN_UNUSED_RESULT;
/// Is video a 360 degress video
@property (nonatomic, readonly) BOOL is360Video;
/// Is audio only stream
@property (nonatomic, readonly) BOOL isAudioOnly;
/// Is video a youtube video
@property (nonatomic) BOOL isYouTubeVideo;
/// Skip ads for this playable.
@property (nonatomic) BOOL shouldSkipAds;
/// Is video a playlist.
@property (nonatomic) BOOL isPlaylist;
@required
/// Identifier
@property (nonatomic, readonly, strong) NSString * _Nullable identifier;
/// Implement this variable for all Playable objects with extensions fields
@property (nonatomic, readonly, strong) NSDictionary * _Nullable extensionsDictionary;
@end

@class APAtomMediaGroup;

SWIFT_PROTOCOL("_TtP11ZappPlugins27ZPAtomEntryPlayableProtocol_")
@protocol ZPAtomEntryPlayableProtocol <ZPPlayable>
- (NSArray<APAtomMediaGroup *> * _Nullable)getMediaGroups SWIFT_WARN_UNUSED_RESULT;
- (AVURLAsset * _Nonnull)assetForContentUrl SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP11ZappPlugins26ZPJsonSerializableProtocol_")
@protocol ZPJsonSerializableProtocol <NSObject>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull dictForJsonSerialization;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)dictionary;
@end


SWIFT_PROTOCOL("_TtP11ZappPlugins15ZPModelProtocol_")
@protocol ZPModelProtocol <ZPJsonSerializableProtocol>
- (NSString * _Nullable)getUniqueID SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nullable)getImagesDictionary SWIFT_WARN_UNUSED_RESULT;
@optional
- (NSString * _Nullable)getBroadcasterID SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP11ZappPlugins21ZPBroadcasterProtocol_")
@protocol ZPBroadcasterProtocol <ZPModelProtocol>
- (NSString * _Nullable)getName SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nullable)getExtensionsDictionary SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)getObjectForKey:(NSString * _Nonnull)forKey SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP11ZappPlugins18ZPCategoryProtocol_")
@protocol ZPCategoryProtocol <ZPModelProtocol>
- (NSString * _Nullable)getName SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getShowName SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getSeasonName SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nullable)getLinkDictionary SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP11ZappPlugins20ZPCollectionProtocol_")
@protocol ZPCollectionProtocol <ZPModelProtocol>
- (NSString * _Nullable)getTitle SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getUITag SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC11ZappPlugins9ZPContent")
@interface ZPContent : NSObject
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic, copy) NSString * _Nullable src;
@property (nonatomic, copy) NSString * _Nullable content;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP11ZappPlugins34ZPDefaultStoreFrontHandlerProtocol_")
@protocol ZPDefaultStoreFrontHandlerProtocol <NSObject>
/// Attempting to purchase purchasableItem.
- (void)attemptToPurchasePurchasableItem:(id <ZPPurchasableItemProtocol> _Nullable)purchasableItem;
@end


SWIFT_PROTOCOL("_TtP11ZappPlugins27ZPDefaultStoreFrontProtocol_")
@protocol ZPDefaultStoreFrontProtocol
/// This delegate method is being called when the purchase is completed successfully.
- (void)itemPurchaseCompleted:(id <ZPPurchasableItemProtocol> _Nullable)purchasableItem;
/// This delegate method is being called when the purchase is failed.
- (void)itemPurchaseFailed:(id <ZPPurchasableItemProtocol> _Nullable)purchasableItem;
/// This delegate method is being called when the purchase is being canceled by the user.
- (void)itemPurchaseCancelled:(id <ZPPurchasableItemProtocol> _Nullable)purchasableItem;
@end

enum ZPDownloadButtonState : NSInteger;

SWIFT_PROTOCOL("_TtP11ZappPlugins24ZPDownloadButtonDelegate_")
@protocol ZPDownloadButtonDelegate
- (void)downloadButton:(id <ZPDownloadButtonProtocol> _Nonnull)downloadButton stateChanged:(enum ZPDownloadButtonState)state;
- (void)downloadButton:(id <ZPDownloadButtonProtocol> _Nonnull)downloadButton tappedWithState:(enum ZPDownloadButtonState)state;
- (NSString * _Nullable)downloadStateChangeNotificationName SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)downloadingProgressChangeNotificationName SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP11ZappPlugins24ZPDownloadButtonProtocol_")
@protocol ZPDownloadButtonProtocol
@property (nonatomic, strong) id <ZPDownloadButtonDelegate> _Nullable delegate;
@property (nonatomic) enum ZPDownloadButtonState state;
- (void)downloadButtonTapped;
- (void)downloadStateChangeTo:(enum ZPDownloadButtonState)state;
- (void)downloadStateDidChangedFrom:(enum ZPDownloadButtonState)oldState to:(enum ZPDownloadButtonState)newState;
- (void)downloadProgressChangedTo:(CGFloat)progress;
- (void)defineButtonsForStates;
@end

typedef SWIFT_ENUM(NSInteger, ZPDownloadButtonState, closed) {
  ZPDownloadButtonStateStartDownload = 0,
  ZPDownloadButtonStatePending = 1,
  ZPDownloadButtonStateDownloading = 2,
  ZPDownloadButtonStateDownloaded = 3,
  ZPDownloadButtonStateError = 4,
};


SWIFT_PROTOCOL("_TtP11ZappPlugins26ZPDownloadableItemProtocol_")
@protocol ZPDownloadableItemProtocol <ZPJsonSerializableProtocol>
/// get download url of the item
- (NSURL * _Nullable)downloadUrl SWIFT_WARN_UNUSED_RESULT;
/// get array of additional content to be saved with the model
- (NSArray<NSString *> * _Nullable)relatedAssets SWIFT_WARN_UNUSED_RESULT;
@optional
/// get identifier
- (NSString * _Nullable)objectIdentifier SWIFT_WARN_UNUSED_RESULT;
/// is downloadable
- (BOOL)canBeDownloaded SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC11ZappPlugins36ZPFirebaseRemoteConfigurationManager")
@interface ZPFirebaseRemoteConfigurationManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZPFirebaseRemoteConfigurationManager * _Nonnull sharedInstance;)
+ (ZPFirebaseRemoteConfigurationManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (NSDictionary<NSString *, id> * _Nonnull)getParametersForMatchingWithRemoteConfigurationKeys SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP11ZappPlugins37ZPFirebaseRemoteConfigurationProtocol_")
@protocol ZPFirebaseRemoteConfigurationProtocol <ZPAdapterProtocol>
/// Stops to track events related with the player.
- (NSDictionary<NSString *, id> * _Nullable)getParametersForMatchingWithRemoteConfigurationKeys SWIFT_WARN_UNUSED_RESULT;
@end

@class AVPlayer;

SWIFT_PROTOCOL("_TtP11ZappPlugins19ZPGoogleIMAProtocol_")
@protocol ZPGoogleIMAProtocol
/// Reflects if the ad in pressent on screen,
@property (nonatomic, readonly) BOOL hasOnScreenAd;
/// Are the ads being loaded.
@property (nonatomic, readonly) BOOL isAdLoading;
/// Called when an ad is ready to play.
@property (nonatomic, copy) void (^ _Nonnull pause)(void);
/// Called when an ad has finished or an error occurred during the playback.
@property (nonatomic, copy) void (^ _Nonnull play)(void);
/// Plays google ima vast ad on top of the player view controller.
/// @param adTagURL             VAST IMA adUrl
/// @param playerViewController Applicaster player view controller that contains avplayer.
/// @param completion           completion block that will called in the following cases:
/// preroll or postroll finised and if the playlist (postroll) finished.
- (void)playIMAWithAdTagURL:(NSString * _Nonnull)adTagURL playerViewController:(UIViewController * _Nonnull)playerViewController displayPlayerCommercialsCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(BOOL))displayPlayerCommercialsCompletion completionHandler:(SWIFT_NOESCAPE void (^ _Nonnull)(BOOL, BOOL, NSDictionary * _Nonnull))completionHandler;
/// Setup playlist that listen to time events of the player.
/// Playlist maycontain VAST of Prerolls, Midrolls, Postrolls, each VAST may conatin multiple number of ads.
/// @param adTagURL             VAST IMA adUrl
/// @param playerViewController Applicaster player view controller that contains avplayer.
/// @param player               Instance of AVPlayer.
- (void)setupIMAPlaylistWithAdTagURL:(NSString * _Nonnull)adTagURL withPlayerViewController:(UIViewController * _Nonnull)playerViewController player:(AVPlayer * _Nonnull)player completionHandler:(SWIFT_NOESCAPE void (^ _Nonnull)(BOOL, BOOL, NSDictionary * _Nonnull))completionHandler;
/// Unload current ads manager.
- (void)unloadAdsManager:(BOOL)success;
@end

typedef SWIFT_ENUM(NSInteger, ZPHqmeItemOfflineState, closed) {
  ZPHqmeItemOfflineStateNotExists = 0,
  ZPHqmeItemOfflineStateDownloadInProgress = 1,
  ZPHqmeItemOfflineStateDownloaded = 2,
};

typedef SWIFT_ENUM(NSInteger, ZPHqmeState, closed) {
  ZPHqmeStateInitial = 0,
  ZPHqmeStateOnline = 1,
  ZPHqmeStateOffline = 2,
  ZPHqmeStateUnavailable = 3,
  ZPHqmeStateDetached = 4,
};


/// This class is used to manage identity in various places.
/// This identity is used agains the applicaster servers as a de-facto replacement of the Apple identifier parameter.
/// This identifier is unique identifier supplied by the server and stored in a persistent way in the keychain.
SWIFT_CLASS("_TtC11ZappPlugins20ZPIdentityClientBase")
@interface ZPIdentityClientBase : NSObject
/// The current bucket ID
@property (nonatomic, copy) NSString * _Nonnull bucketID;
/// The unique identifier for this user.
/// The unique identifier if one has been generated. <code>nil</code> otherwise.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable deviceID;)
+ (NSString * _Nullable)deviceID SWIFT_WARN_UNUSED_RESULT;
/// The token for this user.
/// The token if one has been generated or <code>nil</code> if the latest token has expired or if none have been generated.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable token;)
+ (NSString * _Nullable)token SWIFT_WARN_UNUSED_RESULT;
/// Create / Get new device unique identifier and token
/// \param completion Completions with creation session result.
///
- (void)createDeviceWithCompletion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP11ZappPlugins19ZPImageViewProtocol_")
@protocol ZPImageViewProtocol
/// Loads the image from url without placeholder while loading.
- (void)setImageWithUrl:(NSURL * _Nullable)url;
/// Loads the image from url with placeholder while loading.
- (void)setImageWithUrl:(NSURL * _Nullable)url placeholderImage:(UIImage * _Nullable)placeholderImage;
/// Loads the image from url with placeholder while loading.
/// @param serverResizable Defines if the server should resize the image to the object image size.
- (void)setImageWithUrl:(NSURL * _Nullable)url placeholderImage:(UIImage * _Nullable)placeholderImage serverResizable:(BOOL)serverResizable;
/// Loads the image from url with placeholder while loading.
/// @param url url
/// @param fallbackImage The Image that will be used when if the original image will failed load (can be used for example for cached local image in offline mode).
/// If nil the placeholder will be used. The assumption is that this image is the same type as the original (if gif - gig if png png).
/// @param placeholderImage placeholderImage
/// @param serverResizable Defines if the server should resize the image to the object image size.
- (void)setImageWithUrl:(NSURL * _Nullable)url fallbackImage:(UIImage * _Nullable)fallbackImage placeholderImage:(UIImage * _Nullable)placeholderImage serverResizable:(BOOL)serverResizable;
/// Loads the image from url with placeholder while loading.
/// @param serverResizable Defines if the server should resize the image to the object image size.
/// @param maskImage Mask Image that will be used to crop the image
/// @note Image and Mask Image should be the same size. Mask image should have black and white colors.
/// @note White color should be used to hide part of base image
/// @note Black color should be used to leave part of base image visible
- (void)setImageWithUrl:(NSURL * _Nullable)url maskImage:(UIImage * _Nullable)maskImage placeholderImage:(UIImage * _Nullable)placeholderImage serverResizable:(BOOL)serverResizable;
/// Loads the image from url with placeholder while loading.
/// @param serverResizable Defines if the server should resize the image to the object image size.
/// @param maskImage Mask Image that will be used to crop the image
/// @param fallbackImage The Image that will be used when if the original image will failed load (can be used for example for cached local image in offline mode).
/// If nil the placeholder will be used. The assumption is that this image is the same type as the original (if gif - gig if png png).
/// @note Image and Mask Image should be the same size. Mask image should have black and white colors.
/// @note White color should be used to hide part of base image
/// @note Black color should be used to leave part of base image visible
- (void)setImageWithUrl:(NSURL * _Nullable)url maskImage:(UIImage * _Nullable)maskImage fallbackImage:(UIImage * _Nullable)fallbackImage placeholderImage:(UIImage * _Nullable)placeholderImage serverResizable:(BOOL)serverResizable;
@end

@class NSCoder;

SWIFT_CLASS("_TtC11ZappPlugins11ZPImageView")
@interface ZPImageView : UIImageView <ZPImageViewProtocol>
- (void)setImageWithUrl:(NSURL * _Nullable)url;
- (void)setImageWithUrl:(NSURL * _Nullable)url placeholderImage:(UIImage * _Nullable)placeholderImage;
- (void)setImageWithUrl:(NSURL * _Nullable)url placeholderImage:(UIImage * _Nullable)placeholderImage serverResizable:(BOOL)serverResizable;
- (void)setImageWithUrl:(NSURL * _Nullable)url fallbackImage:(UIImage * _Nullable)fallbackImage placeholderImage:(UIImage * _Nullable)placeholderImage serverResizable:(BOOL)serverResizable;
- (void)setImageWithUrl:(NSURL * _Nullable)url maskImage:(UIImage * _Nullable)maskImage placeholderImage:(UIImage * _Nullable)placeholderImage serverResizable:(BOOL)serverResizable;
- (void)setImageWithUrl:(NSURL * _Nullable)url maskImage:(UIImage * _Nullable)maskImage fallbackImage:(UIImage * _Nullable)fallbackImage placeholderImage:(UIImage * _Nullable)placeholderImage serverResizable:(BOOL)serverResizable;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end




typedef SWIFT_ENUM(NSInteger, ZPNavBarBackgroundType, closed) {
  ZPNavBarBackgroundTypeColor = 0,
  ZPNavBarBackgroundTypeImage = 1,
};

typedef SWIFT_ENUM(NSInteger, ZPNavBarPlacement, closed) {
  ZPNavBarPlacementOnTop = 0,
  ZPNavBarPlacementOverlay = 1,
  ZPNavBarPlacementHidden = 2,
};

typedef SWIFT_ENUM(NSInteger, ZPNavBarPresentationStyle, closed) {
  ZPNavBarPresentationStyleTitle = 0,
  ZPNavBarPresentationStyleLogo = 1,
  ZPNavBarPresentationStyleHidden = 2,
};



SWIFT_CLASS("_TtC11ZappPlugins21ZPPlayerConfiguration")
@interface ZPPlayerConfiguration : NSObject
/// start from offset <code>NSTimeInterval</code>.
@property (nonatomic) NSTimeInterval startTime;
/// play until time <code>NSTimeInterval</code>.
@property (nonatomic) NSTimeInterval endTime;
/// Whether the presentation would be animated or not. Default is true.
@property (nonatomic) BOOL animated;
/// You can use this dictionary in order to pass to your player some custom configuration.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable customConfiguration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol ZPPlayerProtocol;

SWIFT_CLASS("_TtC11ZappPlugins19ZPPlayerManagerBase")
@interface ZPPlayerManagerBase : NSObject
@property (nonatomic, strong) id <ZPPlayerProtocol> _Nullable lastActiveInstance;
/// Create and attach new player instance for specific type and use specified playableItem
/// \param playableItem item to use with newly created player instance
///
///
/// returns:
/// ZPPlayerProtocol conformed instance of the player. I can not be founded nil
- (id <ZPPlayerProtocol> _Nullable)createWithPlayableItem:(id <ZPPlayable> _Nullable)playableItem SWIFT_WARN_UNUSED_RESULT;
/// Check if playableItem can play.
/// \param playableItem Item to play
///
///
/// returns:
/// true in case item can play
- (BOOL)canPlayWithPlayableItem:(id <ZPPlayable> _Nullable)playableItem SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum ZPPlayerType : NSInteger;

SWIFT_CLASS("_TtC11ZappPlugins15ZPPlayerManager")
@interface ZPPlayerManager : ZPPlayerManagerBase
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZPPlayerManager * _Nonnull sharedInstance;)
+ (ZPPlayerManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@property (nonatomic, strong) id <ZPPlayerProtocol> _Nullable lastActiveInstance;
/// Create and attach new player instance for specific type and use specified playableItem
/// \param playableItem - item to use with newly created player instance
///
- (id <ZPPlayerProtocol> _Nullable)createWithPlayableItem:(id <ZPPlayable> _Nullable)playableItem SWIFT_WARN_UNUSED_RESULT;
/// Create and attach new player instance for specific type and use specified playableItem
/// \param playableItem - item to use with newly created player instance
///
/// \param type - type of player to create
///
- (id <ZPPlayerProtocol> _Nonnull)createWithPlayableItem:(id <ZPPlayable> _Nullable)playableItem forType:(enum ZPPlayerType)type SWIFT_WARN_UNUSED_RESULT;
/// Create and attach new player instance for specific type and use specified playableItems
/// \param playableItems - items to use with newly created player instance,
/// Note, all playableItems should be of the same type.
///
/// \param type - type of player to create
///
- (id <ZPPlayerProtocol> _Nonnull)createWithPlayableItems:(NSArray<id <ZPPlayable>> * _Nullable)playableItems forType:(enum ZPPlayerType)type SWIFT_WARN_UNUSED_RESULT;
- (void)presentPlayerWithPlayerInstance:(id <ZPPlayerProtocol> _Nonnull)playerInstance rootViewController:(UIViewController * _Nonnull)rootViewController configuration:(ZPPlayerConfiguration * _Nullable)configuration playableItems:(NSArray<id <ZPPlayable>> * _Nullable)playableItems;
@end


enum ZPPlayerState : NSInteger;

SWIFT_PROTOCOL("_TtP11ZappPlugins16ZPPlayerProtocol_")
@protocol ZPPlayerProtocol <NSObject>
@optional
/// Initialization of player instance view controller with or without specifying item to play
+ (id <ZPPlayerProtocol> _Nullable)pluggablePlayerInitWithPlayableItem:(id <ZPPlayable> _Nullable)item SWIFT_WARN_UNUSED_RESULT;
/// Initialization of player instance view controller with or without specifying items to play and configuration json
+ (id <ZPPlayerProtocol> _Nullable)pluggablePlayerInitWithPlayableItems:(NSArray<id <ZPPlayable>> * _Nullable)items configurationJSON:(NSDictionary * _Nullable)configurationJSON SWIFT_WARN_UNUSED_RESULT;
@required
/// Returns the view controller of current playable player instance.
/// This ViewController should not be presented, instead use the dedicated presentPlayerFullScreen method for full screen.
- (UIViewController * _Nullable)pluggablePlayerViewController SWIFT_WARN_UNUSED_RESULT;
@optional
/// Returns the type of pluggablePlayer instance
- (enum ZPPlayerType)pluggablePlayerType SWIFT_WARN_UNUSED_RESULT;
+ (enum ZPPlayerType)pluggablePlayerType SWIFT_WARN_UNUSED_RESULT;
@required
/// Returns the playing state of the player
- (BOOL)pluggablePlayerIsPlaying SWIFT_WARN_UNUSED_RESULT;
@optional
/// Returns the first playable item instance.
- (id <ZPPlayable> _Nullable)pluggablePlayerFirstPlayableItem SWIFT_WARN_UNUSED_RESULT;
/// Returns the current playable items instance.
- (NSArray<id <ZPPlayable>> * _Nullable)pluggablePlayerPlayableItems SWIFT_WARN_UNUSED_RESULT;
@required
/// Call this method to start playing the given playable. Because this is a full screen player after calling this method the app doesn’t have control of it’s flow.
- (void)presentPlayerFullScreen:(UIViewController * _Nonnull)rootViewController configuration:(ZPPlayerConfiguration * _Nullable)configuration;
@optional
- (void)presentPlayerFullScreen:(UIViewController * _Nonnull)rootViewController configuration:(ZPPlayerConfiguration * _Nullable)configuration completion:(void (^ _Nullable)(void))completion;
@required
/// This method should add the player into the given container
- (void)pluggablePlayerAddInline:(UIViewController * _Nonnull)rootViewController container:(UIView * _Nonnull)container;
@optional
/// This method should add the player into the given container with Configuration
- (void)pluggablePlayerAddInline:(UIViewController * _Nonnull)rootViewController container:(UIView * _Nonnull)container configuration:(ZPPlayerConfiguration * _Nullable)configuration;
@required
/// This method should remove the player from it’s container
- (void)pluggablePlayerRemoveInline;
/// Pauses active player
- (void)pluggablePlayerPause;
/// Stop playing loaded item
- (void)pluggablePlayerStop;
@optional
/// Resume playing loaded item
- (void)pluggablePlayerResume;
@required
/// Start playing
- (void)pluggablePlayerPlay:(ZPPlayerConfiguration * _Nullable)configuration;
@optional
/// Start playing new playable items
- (void)pluggablePlayerPlay:(NSArray<id <ZPPlayable>> * _Nullable)items configuration:(ZPPlayerConfiguration * _Nullable)configuration;
/// implement this method if you would like your player to ignore the default implementation of creating the subscription page for vod items, and use it’s own when starting to play.
- (BOOL)pluggablePlayerCanHandleSubscription SWIFT_WARN_UNUSED_RESULT;
- (void)setOnHoldWithIsOnHold:(BOOL)isOnHold;
- (enum ZPPlayerState)playerState SWIFT_WARN_UNUSED_RESULT;
- (NSTimeInterval)playbackPosition SWIFT_WARN_UNUSED_RESULT;
- (NSTimeInterval)playbackDuration SWIFT_WARN_UNUSED_RESULT;
/// Once an item starts playing, seeks the playback position to the specified seconds (each player decides the behavior when the new position is out of range)
- (void)pluggablePlayerSeekToSeconds:(NSTimeInterval)seconds;
/// Move the current position by the specified delta, negative values are also supported
- (void)pluggablePlayerSeekByDelta:(NSTimeInterval)delta;
/// Starts playing the previous item in the playlist, if currently the first item is playing, each player decides the action (might reset it, might ignore, or stop playback)
- (void)pluggablePlayerMoveBackward;
/// Starts playing the next item in the playlist, if currently the last item is playing, each player decides the action (might reset it, might ignore, or stop playback)
- (void)pluggablePlayerMoveForward;
@end

typedef SWIFT_ENUM(NSInteger, ZPPlayerState, closed) {
  ZPPlayerStateUndefined = 0,
  ZPPlayerStateInterruption = 1,
  ZPPlayerStatePlaying = 2,
  ZPPlayerStatePaused = 3,
  ZPPlayerStateOnHold = 4,
  ZPPlayerStateStopped = 5,
};

typedef SWIFT_ENUM(NSInteger, ZPPlayerType, closed) {
  ZPPlayerTypeUndefined = 0,
  ZPPlayerTypeDefault = 1,
  ZPPlayerTypeAvPlayer = 2,
  ZPPlayerTypePlayer360 = 3,
  ZPPlayerTypePlayerYoutube = 4,
  ZPPlayerTypeAudio = 5,
};


SWIFT_PROTOCOL("_TtP11ZappPlugins24ZPPlugableScreenDelegate_")
@protocol ZPPlugableScreenDelegate <NSObject>
/// Instance of ViewController of Screen Plugin
@property (nonatomic, readonly, strong) UIViewController * _Nonnull screenPluginViewController;
/// Remove Screen Plugin from navigation stack
- (void)removeScreenPluginFromNavigationStack;
@end


SWIFT_PROTOCOL("_TtP11ZappPlugins26ZPUIBuilderPluginsProtocol_")
@protocol ZPUIBuilderPluginsProtocol <NSObject>
/// Initialize plugin adapter for pluggable screen.
/// Plugin should either be a view controller or implement the create screen function.
/// \param pluginModel Plugin model of the screen that will be created
///
/// \param screenModel UIbuilder screen model of the screen
///
/// \param dataSourceModel Data Source of the screen
///
- (nullable instancetype)initWithPluginModel:(ZPPluginModel * _Nonnull)pluginModel screenModel:(ZLScreenModel * _Nonnull)screenModel dataSourceModel:(NSObject * _Nullable)dataSourceModel;
@end


/// Note this protocol must be implemented to have ability to create screen plugin
SWIFT_PROTOCOL("_TtP11ZappPlugins25ZPPluggableScreenProtocol_")
@protocol ZPPluggableScreenProtocol <ZPUIBuilderPluginsProtocol>
@optional
/// Create a view controller for a pluggable screen from a plugin.
///
/// returns:
///
/// <ul>
///   <li>
///     Plugable screen view controller
///   </li>
/// </ul>
- (UIViewController * _Nonnull)createScreen SWIFT_WARN_UNUSED_RESULT;
- (void)screenPluginWillAppearWithViewController:(UIViewController * _Nonnull)viewController;
- (void)screenPluginDidAppearWithViewController:(UIViewController * _Nonnull)viewController;
- (void)screenPluginWillDisappearWithViewController:(UIViewController * _Nonnull)viewController;
/// Notify screen plugin when it did dissapiar
/// \param viewController viewController instance that will be removed
///
- (void)screenPluginDidDisappearWithViewController:(UIViewController * _Nonnull)viewController;
@required
/// Delegation for screen instance
@property (nonatomic, weak) id <ZPPlugableScreenDelegate> _Nullable screenPluginDelegate;
@optional
/// Passing a custom title for navigation bar
@property (nonatomic, readonly, copy) NSString * _Nullable customTitle;
@end

@class NSBundle;

SWIFT_CLASS("_TtC11ZappPlugins15ZPPluginManager")
@interface ZPPluginManager : NSObject
/// Find a plugin model of a given type.
/// note:
/// This version of the function is required to make it usable in Objective-C code.
/// \param type The type of plugin to search.
///
///
/// returns:
/// The first plugin found with the given type.
+ (ZPPluginModel * _Nullable)pluginModel:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<ZPPluginModel *> * _Nullable)pluginModels:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// Retrieve plugin by specific identifier
/// \param pluginID Specific plugin id to search
///
///
/// returns:
/// Plugin model in case plugin exists
+ (ZPPluginModel * _Nullable)pluginModelById:(NSString * _Nonnull)pluginID SWIFT_WARN_UNUSED_RESULT;
+ (NSBundle * _Nullable)bundleForModelClass:(ZPPluginModel * _Nonnull)pluginModel SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC11ZappPlugins13ZPPluginModel")
@interface ZPPluginModel : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11ZappPlugins24ZPPluginPresenterManager")
@interface ZPPluginPresenterManager : NSObject
/// Checks for a plugin whose identifier matches the screen name and use it to load a new view controller.
/// \param plugin Contains the article plugin configurations.
///
/// \param model The datasource model data, used to populate the view controller.
///
///
/// returns:
/// A view controller created by the plugin.
+ (UIViewController * _Nullable)newPluginPresenterWithPlugin:(ZPPluginModel * _Nonnull)plugin model:(NSDictionary * _Nullable)model SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP11ZappPlugins25ZPPluginPresenterProtocol_")
@protocol ZPPluginPresenterProtocol <ZPAdapterProtocol>
/// Create a view controller for presenting an article
/// \param plugin The plugin used for creating the view controller
///
/// \param model The datasource model to present
///
/// \param configurationJSON The configuration dictionary used when initialising the plugin component
///
///
/// returns:
/// A view controller displaying the content from the plugin
+ (UIViewController * _Nullable)viewControllerFor:(ZPPluginModel * _Nonnull)plugin model:(NSDictionary * _Nullable)model configurationJSON:(NSDictionary * _Nullable)configurationJSON SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC11ZappPlugins24ZPPluginUrlSchemeHandler")
@interface ZPPluginUrlSchemeHandler : NSObject
+ (void)handleUrlScheme:(NSDictionary * _Nullable)params;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ZPPreloadURLType, closed) {
  ZPPreloadURLTypeUnknown = 0,
/// < Unknown type - URL exists but not of specified type
  ZPPreloadURLTypeNone = 1,
/// < No App Preload
  ZPPreloadURLTypeWeb = 2,
/// < Web page preload
  ZPPreloadURLTypeImage = 3,
/// < Image preload
  ZPPreloadURLTypeVideo = 4,
};


SWIFT_PROTOCOL("_TtP11ZappPlugins25ZPPurchasableItemProtocol_")
@protocol ZPPurchasableItemProtocol <NSObject>
/// Get authorization providers ids
- (NSArray<NSString *> * _Nonnull)authorizationProvidersIDs SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP11ZappPlugins29ZPReactNativeProviderProtocol_")
@protocol ZPReactNativeProviderProtocol <ZPAdapterProtocol>
/// Use this in order to add to your React provider runtime handlers for JS2Native events.
/// @param extraReactBridgeModules - Array of objects implementing <code>RCTBridgeModule</code> interface.
@property (nonatomic, copy) NSArray * _Nullable extraReactBridgeModules;
/// Init method.
- (nonnull instancetype)initWithConfigurationJSON:(NSDictionary * _Nullable)configurationJSON bundleUrl:(NSURL * _Nonnull)bundleUrl moduleName:(NSString * _Nonnull)moduleName extraParams:(NSDictionary * _Nonnull)extraParams;
/// Init method.
- (nonnull instancetype)initWithConfigurationJSON:(NSDictionary * _Nullable)configurationJSON bundleName:(NSString * _Nonnull)bundleName extraParams:(NSDictionary * _Nonnull)extraParams;
/// Call this method in order to start loading of React (before presentation but after setup - better call right before presentation).
/// React will not be loaded until this method is being called.
/// MAKE sure to set all the configuration you need on your react provider before calling this method - most of the properties
/// are locked and not changeable after starting the load.
- (void)startLoadingReactWithCompletion:(void (^ _Nullable)(void))completion;
@optional
/// Force the react native bundle file to be downloaded and cached.
- (void)downloadAndCacheBundle;
@end


SWIFT_CLASS("_TtC11ZappPlugins25ZPReactNativeBaseProvider")
@interface ZPReactNativeBaseProvider : UIViewController <ZPPluggableScreenProtocol, ZPPluginPresenterProtocol, ZPReactNativeProviderProtocol>
@property (nonatomic, strong) id <ZPPlugableScreenDelegate> _Nullable screenPluginDelegate;
@property (nonatomic, strong) NSDictionary * _Nullable configurationJSON;
@property (nonatomic, copy) NSArray * _Nullable extraReactBridgeModules;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (UIViewController * _Nullable)viewControllerFor:(ZPPluginModel * _Nonnull)plugin model:(NSDictionary * _Nullable)model configurationJSON:(NSDictionary * _Nullable)configurationJSON SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithConfigurationJSON:(NSDictionary * _Nullable)configurationJSON OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithConfigurationJSON:(NSDictionary * _Nullable)configurationJSON bundleUrl:(NSURL * _Nonnull)bundleUrl moduleName:(NSString * _Nonnull)moduleName extraParams:(NSDictionary * _Nonnull)extraParams OBJC_DESIGNATED_INITIALIZER;
- (void)startLoadingReactWithCompletion:(void (^ _Nullable)(void))completion;
- (nonnull instancetype)initWithConfigurationJSON:(NSDictionary * _Nullable)configurationJSON bundleName:(NSString * _Nonnull)bundleName extraParams:(NSDictionary * _Nonnull)extraParams OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithPluginModel:(ZPPluginModel * _Nonnull)pluginModel screenModel:(ZLScreenModel * _Nonnull)screenModel dataSourceModel:(NSObject * _Nullable)dataSourceModel;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC11ZappPlugins20ZPReactNativeManager")
@interface ZPReactNativeManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZPReactNativeManager * _Nonnull sharedInstance;)
+ (ZPReactNativeManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (void)cacheReactNativeBundles;
@end



SWIFT_PROTOCOL("_TtP11ZappPlugins37ZPRootViewContainerControllerDelegate_")
@protocol ZPRootViewContainerControllerDelegate
/// Request to place navigation bar view in proper place for placement type
/// \param navigationBar Navigation Bar View to present
///
/// \param placementType Difines presentation type for navigation bar
///
- (void)placeNavBarToContainerWithNavigationBar:(UIView * _Nonnull)navigationBar placementType:(enum ZPNavBarPlacement)placementType;
/// Request if container is root navigation container
///
/// returns:
/// true if yes, othewise false
- (BOOL)isRootNavigationContainer SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP11ZappPlugins26ZPScreenAutomationProtocol_")
@protocol ZPScreenAutomationProtocol <NSObject>
@property (nonatomic, readonly, copy) NSString * _Nullable screenAccessibilityIdentifier;
@end

@class NSError;

SWIFT_PROTOCOL("_TtP11ZappPlugins27ZPScreenHookAdapterProtocol_")
@protocol ZPScreenHookAdapterProtocol <ZPUIBuilderPluginsProtocol>
@optional
/// Define if current hook can block flow
@property (nonatomic, readonly) BOOL isFlowBlocker;
/// Request if manager must present hook with screen plugin
- (void)requestScreenPluginPresentationWithCompletion:(void (^ _Nonnull)(BOOL))completion;
/// Request if hook want to be called reccuring when same screen instance invoke post launch hook
- (void)reccuringPostLaunchHookWithCompletion:(void (^ _Nonnull)(BOOL))completion;
/// Sends data to adapter that user removed screen
/// \param viewController ViewController instance that will be removed
///
- (void)hookPluginDidDisappearWithViewController:(UIViewController * _Nonnull)viewController;
@required
/// Execute hook
/// \param presentationIndex Index of presenatation for same hook
///
/// \param dataDict dictionary that can be passed beetween hooks
///
/// \param taskFinishedWithCompletion Completion hook finish it task
///
- (void)executeHookWithPresentationIndex:(NSInteger)presentationIndex dataDict:(NSDictionary<NSString *, id> * _Nullable)dataDict taskFinishedWithCompletion:(void (^ _Nonnull)(BOOL, NSError * _Nullable, NSDictionary<NSString *, id> * _Nullable))taskFinishedWithCompletion;
- (nullable instancetype)initWithPluginModel:(ZPPluginModel * _Nonnull)pluginModel dataSourceModel:(NSObject * _Nullable)dataSourceModel;
@end


SWIFT_PROTOCOL("_TtP11ZappPlugins27ZPScreenHookManagerProtocol_")
@protocol ZPScreenHookManagerProtocol <NSObject>
/// PerformHook post hook
/// \param screenID Id of the screen
///
/// \param model data source model of screen
///
/// \param completion completion block
///
- (void)performPostHookWithHookedViewController:(UIViewController * _Nullable)hookedViewController screenID:(NSString * _Nonnull)screenID model:(NSObject * _Nullable)model completion:(void (^ _Nonnull)(BOOL))completion;
/// PerformHook pre hook
/// \param screenID Id of the screen
///
/// \param model data source model of screen
///
/// \param completion completion block
///
- (void)performPreHookWithHookedViewController:(UIViewController * _Nullable)hookedViewController screenID:(NSString * _Nonnull)screenID model:(NSObject * _Nullable)model completion:(void (^ _Nonnull)(BOOL))completion;
@property (nonatomic, copy) void (^ _Nullable presentInCustomViewController)(UIViewController * _Nonnull, NSString * _Nullable);
@end


SWIFT_PROTOCOL("_TtP11ZappPlugins24ZPScreenPluginRNDelegate_")
@protocol ZPScreenPluginRNDelegate
- (void)removeScreenPluginFromNavigationStack;
@end


SWIFT_PROTOCOL("_TtP11ZappPlugins24ZPScreenPluginRNProtocol_")
@protocol ZPScreenPluginRNProtocol
@property (nonatomic, weak) id <ZPScreenPluginRNDelegate> _Nullable delegate;
- (void)screenPluginWillAppearWithViewController:(UIViewController * _Nonnull)viewController;
- (void)screenPluginDidAppearWithViewController:(UIViewController * _Nonnull)viewController;
- (void)screenPluginWillDisappearWithViewController:(UIViewController * _Nonnull)viewController;
- (void)screenPluginDidDisappearWithViewController:(UIViewController * _Nonnull)viewController;
@end



SWIFT_PROTOCOL("_TtP11ZappPlugins25ZPUIBuilderScreenProtocol_")
@protocol ZPUIBuilderScreenProtocol <NSObject>
/// Screen Model of the UIBuilder screen, retrieved from the river.json
@property (nonatomic, strong) ZLScreenModel * _Nullable screenModel;
@property (nonatomic, strong) NSObject * _Nullable dataSourceModel;
@property (nonatomic, copy) NSString * _Nullable screenName;
- (void)reloadScreen;
@end


SWIFT_PROTOCOL("_TtP11ZappPlugins29ZPVideoBackgroundViewProtocol_")
@protocol ZPVideoBackgroundViewProtocol <NSObject>
/// Set video url
- (void)setVideoUrlWithVideoUrl:(NSURL * _Nonnull)videoUrl;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
