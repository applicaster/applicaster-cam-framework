//
//  APAuthorizationManager.h
//  applicaster
//
//  Created by Reuven Levitsky on 6/22/15.
//  Copyright (c) 2013 Applicaster Ltd. All rights reserved.
//

#import <Foundation/Foundation.h>
#import "APAuthorizationProvider.h"
#import "APPurchasableItem.h"

// ----------------------------------------- APAuthorizationClientDelegate ----------------------------------------- //

extern NSString * const kAuthorizationURLSchemeAction;

@protocol APAuthorizationClientDelegate <NSObject>

@optional

/**
 This method should be called when the authorization process was successfull and completed and the token is received.
 
 @param token that was generated by the authorization process.
 */
- (void)didFinishAuthorizationWithToken:(NSString *)token;

/**
 This method should be called if anything went wrong and the process failed.

 @param error - an Error describing what went wrong with the current process.
 */
- (void)didFailAuthorizationWithError:(NSError *)error;

/**
 This method should be called if the user exits the SSO screen / cancels the process.
 */
- (void)didCancelAuthorization;

@end

// ----------------------------------------- APAuthorizationClient ----------------------------------------- //

@protocol APAuthorizationClient <NSObject>

@property (nonatomic, weak) id<APAuthorizationClientDelegate> delegate;

@required

/**
 Every type of client will have to implement this method.
 
 @param authProvider - The model that have all the data we need for the authorization process.
 @param params - Additional params that we get in addition to the authorization provider.
 */
- (instancetype)initWithAuthorizationProvider:(APAuthorizationProvider *)authProvider
                                    andParams:(NSDictionary *)params;

/**
 Every type of client will have to implement this method. 
 This method will be invoked by the autorization manager in order to start a authorization process.
 */
- (void)startAuthorizationProcess;

@optional

/**
 Implement this method if your client needs to add extra params for the analytics.
 */
- (NSDictionary *)extraAnalyticsParams;

/**
 Implement this method if your client needs to handle a URL scheme as part of his authorization process.

 @param url - The URL scheme that was invoked.
 */
- (void)handleAuthorizationURLScheme:(NSURL *)url;

@end

// ----------------------------------------- APAuthorizationDelegate ----------------------------------------- //

/**
 This delegate may be used from your code in order to get some events that are triggered during the authorization process
 */
@protocol APAuthorizationDelegate <APAuthorizationClientDelegate>



@end

// ----------------------------------------- APAuthorizationManager ----------------------------------------- //

/**
 This class is a singeltoon, please use the sharedInstance method in order to get it's instance.
 
 This class is managing all the flow of authorizing the app for different clients of SSO.
 */
@interface APAuthorizationManager : NSObject {

}

/**
  This class is a singeltoon, please use the sharedInstance method in order to get it's instance.

 @return The sharedInstance of this class.
 */
+ (instancetype)sharedInstance;

/**
 This method is always returning a copy of the tokens from the file - just to make sure the manager is always synced with the file (before writing and reading).
 
 @return a copy NSMutableDictionary of the tokens from the file. If the file doesn't yet exists returns an empty NSMutableDictionary instance.
 */
- (NSMutableDictionary *)authorizationTokens;

/**
 Updates the token for the given authorization provider.

 @param authorizationToken - the token that was received by the authorization provider after finishing successfully the authorization process.
 @param authorizationProviderID - The uniqueID of the authorization provider which the token was created by.
 */
- (void)setAuthorizationToken:(NSString *)authorizationToken
  withAuthorizationProviderID:(NSString *)authorizationProviderID;

/**
 Returns the token for the given authorization provider.

 @param authorizationProviderID - The uniqueID of the authorization provider which the token you want to get was created by.
 */
- (void)authorizationTokenForAuthorizationProviderID:(NSString *)authorizationProviderID;

/**
 This method updates the authorization tokens file and deletes all the providers that are no longer received from the server. 
 Be carefull when you call it and make sure this array is the exact one coming from the server and there wasn't a loading failure / weird HQME mode or something.

 @param authorizationProviders - NSArray containing objects from type APAuthorizationProvider.
 */
- (void)updateAuthorizationTokensWithAuthorizationProviders:(NSArray *)authorizationProviders;

/**
 Call this method in order to begin an authorization process for the given provider.

 @param autorizationProvider - The authorization provider which will be used for the authorization.
 @param purchasable - The item which you want to authorize for.
 @param delegate - delegate that will be invoked for triggered events.
 */
- (void)startAuthorizationWithProvider:(APAuthorizationProvider *)authorizationProvider
                           purchasable:(APPurchasableItem *)purchasable
                           andDelegate:(id<APAuthorizationDelegate>)delegate;


/**
 Call this method in order to begin an authorization process for the given provider.
 
 @param autorizationProvider - The authorization provider which will be used for the authorization.
 @param purchasable - The item which you want to authorize for.
 @param delegate - delegate that will be invoked for triggered events.
 @param trigger - What cause the authentication to be launced
 */
- (void)startAuthorizationWithProvider:(APAuthorizationProvider *)authorizationProvider
                           purchasable:(APPurchasableItem *)purchasable
                           andDelegate:(id<APAuthorizationDelegate>)delegate
                               trigger:(NSString *)trigger;

/**
 Call this method to try to handle the URL scheme of an SSO.

 @param url - The URL scheme to handle
 */
- (void)handleAuthorizationURLScheme:(NSURL *)url;

@end
