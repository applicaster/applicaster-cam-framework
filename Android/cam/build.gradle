apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28


    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // Applicaster SDK
    def applicasterSDKPath = 'com.applicaster:applicaster-android-sdk:2.33.15'
    // Check if an open SDK is defined - if not use the closed one.
    def devSDK = findProject(':applicaster-android-sdk')
    if (devSDK != null) {
        implementation project(':applicaster-android-sdk')
    } else {
        api(applicasterSDKPath)
    }
    implementation 'com.applicaster:applicaster-iap-framework:0.0.1'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:support-v4:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
}
repositories {
    mavenCentral()
}

//------------- Bintray publishing -----------//

apply plugin: "maven-publish"
apply plugin: "com.jfrog.bintray"
apply plugin: 'org.jetbrains.dokka-android'

buildscript {
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'
        classpath 'com.github.dcendents:android-maven-plugin:1.2'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2'
        classpath "org.jetbrains.dokka:dokka-android-gradle-plugin:0.9.17"
    }
}

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--abbrev=0', '--tags'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId GROUP

            def versionFromTag = getVersionName()
            def versionFromProps = VERSION
            def currentVersion = null
            if (versionFromTag != null) {
                currentVersion = versionFromTag
                version currentVersion
            } else if (versionFromProps != null){
                currentVersion = versionFromProps
                version currentVersion
            }
            if (currentVersion != null) {
                artifactId ARTIFACT_ID
                artifact "build/outputs/aar/${project.getName()}-release.aar"
                afterEvaluate {
                    artifact javadocJar
                    artifact sourcesJar
                }
                pom.withXml {
                    Node root = asNode()
                    root.appendNode('name', ARTIFACT_ID)
                    root.appendNode('description', POM_DESCRIPTION)
                    root.appendNode('url', POM_URL)

                    def issues = root.appendNode('issueManagement')
                    issues.appendNode('system', 'github')
                    issues.appendNode('url', ISSUE_URL)

                    def scm = root.appendNode('scm')
                    scm.appendNode('url', POM_SCM_URL)
                    scm.appendNode('connection', POM_SCM_CONNECTION)
                    scm.appendNode('developerConnection', POM_SCM_DEV_CONNECTION)

                    def license = root.appendNode('licenses').appendNode('license')
                    license.appendNode('name', POM_LICENCE_NAME)
                    license.appendNode('url', POM_LICENCE_URL)
                    license.appendNode('distribution', POM_LICENCE_DIST)

                    def developer = root.appendNode('developers').appendNode('developer')
                    developer.appendNode('id', POM_DEVELOPER_ID)
                    developer.appendNode('name', POM_DEVELOPER_NAME)
                    developer.appendNode('email', POM_DEVELOPER_EMAIL)

                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.compile.allDependencies.each {
                        if (!it.name.is('unspecified')) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                    configurations.implementation.allDependencies.each {
                        if (!it.name.is('unspecified')) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                    configurations.api.allDependencies.each {
                        if (!it.name.is('unspecified')) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }
}

static def getBintrayUserProperty() {
    return System.getenv("BINTRAY_USER")
}

static def getBintrayApiKeyProperty() {
    return System.getenv("BINTRAY_API_KEY")
}

bintrayUpload {
    dependsOn "publishMavenJavaPublicationToMavenLocal"
}
bintray {
    user = bintrayUserProperty
    key = bintrayApiKeyProperty
    publications = ['mavenJava']

    dryRun = false
    publish = true
    pkg {
        repo = 'maven'
        name = ARTIFACT_ID
        userOrg = 'applicaster-ltd'
        websiteUrl = POM_URL
        issueTrackerUrl = ISSUE_URL
        vcsUrl = POM_SCM_URL
        licenses = ['Apache-2.0']
        labels = ['aar', 'android']
        version {
            name = VERSION
            vcsTag = 'v' + VERSION
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task androidJar(type: Jar) {
    from 'build/intermediates/classes/release'
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives androidJar
}
